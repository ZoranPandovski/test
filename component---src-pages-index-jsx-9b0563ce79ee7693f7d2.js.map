{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["Index","render","postEdges","this","props","data","allMarkdownRemark","edges","postList","getPostList","getTagCategoryList","tagList","categoryList","content","hasThumbnail","config","homeHasThumbnail","hasLoadmore","homeHasLoadmore","postsPerPage","numberLoadmore","btnLoadmore","sidebar","links","sidebarLinks","headerTitle","homeHeader","siteTitle","className","title","React","Component","pageQuery","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","description","keywords","postURL","postNode","postPath","postSEO","image","postMeta","frontmatter","excerpt","cover","childImageSharp","fixed","src","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-pages-index-jsx-9b0563ce79ee7693f7d2.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport Header from \"../components/Header/Header\";\nimport MainContainer from \"../components/MainContainer/MainContainer\";\nimport Sidebar from \"../components/Sidebar/Sidebar\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport { getPostList, getTagCategoryList } from \"../utils/helpers\";\nimport config from \"../../data/SiteConfig\";\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    const postList = getPostList(postEdges);\n    const { tagList, categoryList } = getTagCategoryList(postList);\n    const content = (\n      <PostListing \n        postList={postList} \n        hasThumbnail={config.homeHasThumbnail} \n        hasLoadmore={config.homeHasLoadmore} \n        postsPerPage={config.postsPerPage}\n        numberLoadmore={config.numberLoadmore}\n        btnLoadmore={config.btnLoadmore}\n      />\n    );\n    const sidebar = (\n      <Sidebar \n        tagList={tagList} \n        categoryList={categoryList} \n        links={config.sidebarLinks}\n      />\n    );\n\n    const headerTitle = config.homeHeader \n      ? `${config.siteTitle} - ${config.homeHeader}`\n      : `${config.siteTitle}`;\n\n    return (\n      <Layout>\n        <div className=\"index-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <Header title={headerTitle} />\n          <MainContainer content={content} sidebar={sidebar} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { \n        fields: [fields___date], \n        order: DESC \n      }\n      filter: { \n        frontmatter: { \n          template: { eq: \"post\" } \n        } \n      }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            categories\n            date\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 660, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let keywords;\n    let image = \"\";\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n\n      keywords = postMeta.keywords\n\n      if (postMeta.cover) {\n        image = postMeta.cover.childImageSharp.fixed.src;\n      }\n\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n        {keywords && <meta name=\"keywords\" content={keywords} />}\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}